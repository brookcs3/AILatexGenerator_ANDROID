import { useState, useEffect } from 'react';
import { isPlatform, detectPlatform } from '@/lib/platform';
import { downloadFile, shareFile } from '@/lib/fileHandler';
import { initializeCapacitor } from '@/lib/capacitorAdapter';
import { TEST_PDF_BASE64 } from '@/lib/testPdf';
import { Link } from 'wouter';

export default function AndroidTestPage() {
  const [platform, setPlatform] = useState<string>('detecting...');
  const [fileTestResult, setFileTestResult] = useState<string>('');
  const [fileListResult, setFileListResult] = useState<string>('');
  const [pdfTestResult, setPdfTestResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);

  useEffect(() => {
    setPlatform(detectPlatform());
  }, []);

  const testPlatform = () => {
    setPlatform(detectPlatform());
    alert(`Current platform: ${detectPlatform()}`);
  };

  const testFileWrite = async () => {
    setIsLoading(true);
    setFileTestResult('Testing file write...');

    try {
      // Create a simple text file
      const testContent = 'Hello from AILatexGenerator Android Test\n\nThis is a test file created on ' + new Date().toISOString();
      const filename = 'test-file.txt';
      
      // Convert to base64
      const base64Content = btoa(testContent);
      
      // Log the file details for debugging
      console.log('Writing test file:', {
        filename,
        contentLength: testContent.length,
        base64Length: base64Content.length
      });
      
      // Download the file
      await downloadFile(filename, base64Content);
      
      setFileTestResult('‚úÖ File write test successful! Check your Downloads folder.');
    } catch (error: unknown) {
      console.error('File write test failed:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      setFileTestResult(`‚ùå File write test failed: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  const listFiles = async () => {
    setIsLoading(true);
    setFileListResult('Listing files...');

    try {
      // Only works on Android
      if (!isPlatform('android')) {
        setFileListResult('This feature only works on Android');
        setIsLoading(false);
        return;
      }

      const { Filesystem } = await initializeCapacitor();
      
      if (!Filesystem) {
        throw new Error('Filesystem plugin not available');
      }
      
      // List files in the Documents directory
      const result = await Filesystem.readdir({
        path: '',
        directory: 'DOCUMENTS'
      });
      
      if (result && result.files && result.files.length > 0) {
        setFileListResult(`üìÅ Found ${result.files.length} files:\n${result.files.join('\n')}`);
      } else {
        setFileListResult('üìÅ No files found in Documents directory');
      }
    } catch (error: unknown) {
      console.error('List files failed:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      setFileListResult(`‚ùå List files failed: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  const testDirectPdf = async () => {
    setIsLoading(true);
    setPdfTestResult('Testing direct PDF download...');

    try {
      // Use the clean test PDF from our imported constant
      // This is a verified minimal valid PDF that works across platforms
      
      // Log for debugging
      console.log('Using test PDF with base64 length:', TEST_PDF_BASE64.length);
      
      // Download the PDF
      const today = new Date().toISOString().split('T')[0];
      const filename = `android-test-${today}.pdf`;
      
      await downloadFile(filename, TEST_PDF_BASE64);
      
      setPdfTestResult(`‚úÖ Direct PDF test successful! Check your Downloads folder for ${filename}`);
    } catch (error: unknown) {
      console.error('Direct PDF test failed:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      setPdfTestResult(`‚ùå Direct PDF test failed: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  const testSharePdf = async () => {
    setIsLoading(true);
    setPdfTestResult('Testing PDF sharing...');

    try {
      // Use the clean test PDF from our imported constant
      const today = new Date().toISOString().split('T')[0];
      const filename = `android-test-share-${today}.pdf`;
      
      await shareFile(
        filename, 
        TEST_PDF_BASE64,
        'Test PDF from AI LaTeX Generator',
        'This is a test PDF generated by the Android testing interface'
      );
      
      setPdfTestResult(`‚úÖ PDF sharing test initiated successfully!`);
    } catch (error: unknown) {
      console.error('PDF sharing test failed:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      setPdfTestResult(`‚ùå PDF sharing test failed: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-4 max-w-md mx-auto">
      <h1 className="text-2xl font-bold mb-6 text-center">Android Testing Page</h1>
      
      <div className="mb-8 bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
        <h2 className="text-xl font-semibold mb-2">Platform Detection</h2>
        <p className="mb-4">Current Platform: <span className="font-mono">{platform}</span></p>
        <button 
          onClick={testPlatform}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
          disabled={isLoading}
        >
          Test Platform
        </button>
      </div>
      
      <div className="mb-8 bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
        <h2 className="text-xl font-semibold mb-2">File Operations</h2>
        <button 
          onClick={testFileWrite}
          className="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded mr-2 mb-2"
          disabled={isLoading}
        >
          Test File Write
        </button>
        <button 
          onClick={listFiles}
          className="bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded mb-2"
          disabled={isLoading}
        >
          List Files
        </button>
        {fileTestResult && (
          <div className="mt-2 p-2 bg-white dark:bg-gray-700 rounded">
            <pre className="whitespace-pre-wrap">{fileTestResult}</pre>
          </div>
        )}
        {fileListResult && (
          <div className="mt-2 p-2 bg-white dark:bg-gray-700 rounded">
            <pre className="whitespace-pre-wrap">{fileListResult}</pre>
          </div>
        )}
      </div>
      
      <div className="mb-8 bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
        <h2 className="text-xl font-semibold mb-2">PDF Testing</h2>
        <div className="flex flex-wrap gap-2 mb-3">
          <button 
            onClick={testDirectPdf}
            className="bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded"
            disabled={isLoading}
          >
            Download PDF
          </button>
          <button 
            onClick={testSharePdf}
            className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
            disabled={isLoading}
          >
            Share PDF
          </button>
        </div>
        
        <Link to="/android-pdf-test" className="block text-center mb-3 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded">
          Advanced PDF Testing Page
        </Link>
        
        {pdfTestResult && (
          <div className="mt-2 p-2 bg-white dark:bg-gray-700 rounded">
            <pre className="whitespace-pre-wrap">{pdfTestResult}</pre>
          </div>
        )}
      </div>
      
      {isLoading && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
            <p className="text-center mt-2">Processing...</p>
          </div>
        </div>
      )}
    </div>
  );
}